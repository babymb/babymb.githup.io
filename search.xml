<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人博客]]></title>
    <url>%2Fbabymb.githup.io%2F2018%2F01%2F04%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[博客搭建好的第一篇文章感觉美美的!]]></content>
  </entry>
  <entry>
    <title><![CDATA[面试题及答案]]></title>
    <url>%2Fbabymb.githup.io%2F2018%2F01%2F04%2F%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%2F</url>
    <content type="text"><![CDATA[什么是mybatis的一级缓存和二级缓存​ 一级缓存优化了我们的查询策略,减少了对数据库的访问次数,他是mybatis默认开启的缓存,不可关闭; ​ 一级缓存是sqlsession级别的缓存,就是在同一个sqlsession中如果执行了同一个sql语句的话,只有第一次查询会访问数据库,其他都会从缓存中拿数据 ​ 二级缓存是Mapper.xml级别的缓存,在同一个Mapper执行中,只要执行的sql来源是一样的,只有第一次查询会访问数据库,其他都会从缓存中拿数据 ​ 二级缓存也是为了优化查询策略,减少对数据可的访问次数,默认关闭,可以手动在settings标签中开启; ​ 缺点:二级缓存需要序列化类,如果类不序列化的话会报错,序列化文件存在期间如果数据库数据发生改变,文件不会被更新,导致数据不准确, ​ 一般我们会使用Redis内存库作为2级缓存, ​ Integer a=100; ​ Integer b=100; ​ Integer c=150; ​ Integer d=150; ​ System.out.println(a==b); ​ System.out.println(c==d); ​ 说出结果和产生的原因 看代码说结果​ 第一个为:true ​ 第二个为:false ​ 当我们给一个Integer赋予一个int类型的时候会调用Integer的静态方法valueOf。 ​ valueOf里面有个cache数组,初始化存入了-128 - 127的值.然后就做判断如果赋值 ​ 是在这个区间内他是直接从cache中获取引用Integer对象从而地址是不变的,如果不 ​ 在这个范围他会new Integer() 因为这个地址是新的地址，所以第一个为true,第二个结果是false; 使用ajax请求的方式与直接访问servlet的方式有什么优势？​ 1.通过异步请求的方式，客户端发送请求到服务器端，无论服务器是否返回响应，客户端都可以随意做其他事情，不会被卡死，提升用户体验。 ​ 2.可以实现局部刷新，在不更新整个页面的前提下维护数据，提升用户体验度。 ​ 3.优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用 ​ 4.Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大量用户下的服务器负载。 JSP请求是如何被处理的​ 浏览器首先要请求一个以.jsp扩展名结尾的页面，发起JSP请求，然后，Web服务器读取这个请求， ​ 使用JSP编译器把JSP页面转化成一个 Servlet类。需要注意的是，只有当第一次请求页面或者是JSP文件发生 ​ 改变的时候JSP文件才会被编译，然后服务器调用servlet类，处理浏览 器的请求。一旦请求执行结束， ​ servlet会把响应发送给客户端 购物车能不#能存储到request域或者applicationContext域中或者session域中，如果不能为什么，如果能为什么 不能存储到request 因为 request 是一次请求有效，如果放到request域中，最终购物车只有最后一次 请求携带的商品。（购物车只有一件商品） applicationContext 是整个项目的上下文对线， 用于存放servlet之间的共享数据，如果用它会出现 谁结账都会把前面请求人购买的东西全结算了。 而用session 可以 是因为 当用户和服务器产生一个新回话的时候，tomcat引擎自动产生一个sessionId, 作为我们的cookie 的值，返回给浏览器，可以实现用户再次访问服务器的时候， 根据第一次产生的sessionId解读给用户，那么通过这个sessionId就可以把上一次产生的购物车拿出来 -—————————————————————————————————————————– 什么是代理模式? 动态代理和静态代理有什么区别？代理模式：代理模式是一种常用的设计模式，目的就是为其他对象提供一个代理以控制对某个对象的访问。 动态代理和静态代理的区别 ： 静态代理的一个代理只能代理一种类型，而且是在编译器就已经确定被代理的对象。而动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型的对象。 动态代理基于什么原理？ 典型回答：反射机制是 Java 语言提供的一种基础功能，赋予程序在运行时自省（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。 动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装 RPC 调用、面向切面的编程（AOP）。 实现动态代理的方式很多，比如 JDK 自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似 ASM、cglib（基于 ASM）、Javassist 等。 赵:怎样设计一个单例设计模式,并说明原因? 答:1.为了保证类对象的唯一性,要让构造方法私有化。 2.并且创建一个静态的成员变量，并在这个成员变量中，把这个对象new出来。 3.提供一个公共的访问方法，并把上一步创建出来的对象返回，但是因为不能通过new对象的方式创建，所以也要把这个方法设置为静态的，通过类名直接调用，这也正是因为上一步要创建一个静态成变量，因为静态的成员变量只有静态的方法才能访问。 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？java中静态属性和静态方法可以被继承，但是没有被重写(overwrite)而是被隐藏. 原因： 1)、静态方法和属性是属于类的，调用的时候直接通过类名.方法名完成对，不需要继承机制及可以调用。如果子类里面定义了静态方法和属性，那么这时候父类的静态方法或属性称之为”隐藏”。如果你想要调用父类的静态方法和属性，直接通过父类名.方法或变量名完成，至于是否继承一说，子类是有继承静态方法和属性，但是跟实例方法和属性不太一样，存在”隐藏”的这种情况。 2)、多态之所以能够实现依赖于继承、接口和重写、重载（继承和重写最为关键）。有了继承和重写就可以实现父类的引用指向不同子类的对象。重写的功能是：”重写”后子类的优先级要高于父类的优先级，但是“隐藏”是没有这个优先级之分的。 3)、静态属性、静态方法和非静态的属性都可以被继承和隐藏而不能被重写，因此不能实现多态，不能实现父类的引用可以指向不同子类的对象。非静态方法可以被继承和重写，因此可以实现多态。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class Test1 &#123; public static void main(String[] args) &#123; Cat cat = new Cat(); cat.hao(); &#125;&#125;/*- 静态变量 和 静态方法能不能被继承 但是不能被重写 */class Animal&#123; static int a =10; public static void hao() &#123; System.out.println(&quot;父类的方法&quot;); &#125; public void henhao() &#123; &#125;&#125;class Cat extends Animal&#123;/*static int a =11; @Override public static void hao() &#123; System.out.println(&quot;子类的方法&quot;); &#125;*/ @Override public void henhao() &#123; &#125; &#125; public class Main &#123; public static void main(String[] args) &#123; B.hao1(); &#125;&#125;class A&#123; static &#123; System.out.println(&quot;A&quot;); &#125;&#125;class B extends A&#123; /* * 编译器存在 . .class * 继承： 子类创建父类对象的时候，优先去初始化其父类 * 无论你以何种方式去加载这个类 那么这个类中的 静态代码块是不是最先执行 */ static &#123; System.out.println(&quot;B&quot;); &#125; public final static String c = &quot;C&quot;; public final static void hao1() &#123; System.out.println(&quot;haha&quot;); &#125;&#125;]]></content>
  </entry>
</search>
